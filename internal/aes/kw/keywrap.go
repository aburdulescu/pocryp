package kw

import (
	"crypto/aes"
	"crypto/subtle"
	"encoding/binary"
	"errors"

	"bandr.me/p/pocryp/internal/util"
)

var aesKeyWrapDefaultIV = []byte{0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6, 0xA6}

func Wrap(kek, plaintext []byte) ([]byte, error) {
	// RFC 3394 Key Wrap - 2.2.1 (index method)

	const blkSize = 8

	P := plaintext

	if len(P)%blkSize != 0 {
		return nil, errors.New("plaintext not 8 byte aligned")
	}

	block, err := aes.NewCipher(kek)
	if err != nil {
		return nil, err
	}

	n := len(P) / blkSize

	// 1) Initialize variables.
	var bufA [blkSize]byte
	A := bufA[:]
	copy(A, aesKeyWrapDefaultIV)

	R := make([][blkSize]byte, n)
	for i := range R {
		copy(R[i][:], P[i*blkSize:])
	}

	// AES block
	var bufB [16]byte
	B := bufB[:]

	//  2) Calculate intermediate values.
	for j := 0; j <= 5; j++ {
		for i := 1; i <= n; i++ {
			// B = A | R[i]
			if err := util.Concat(B, A, R[i-1][:]); err != nil {
				return nil, err
			}

			// B = AES(K, A | R[i])
			block.Encrypt(B, B)

			t := uint64((n * j) + i)
			msbB := binary.BigEndian.Uint64(B[:blkSize])

			// A = MSB(64, B) ^ t
			binary.BigEndian.PutUint64(A, msbB^t)

			lsbB := B[blkSize:]
			copy(R[i-1][:], lsbB)
		}
	}

	// 3) Output the results.

	// C = A + R
	C := make([]byte, (n+1)*blkSize)
	copy(C, A)
	for i := 0; i < n; i++ {
		copy(C[(i+1)*blkSize:], R[i][:])
	}

	return C, nil
}

func Unwrap(kek, ciphertext []byte) ([]byte, error) {
	// RFC 3394 Key Unwrap - 2.2.2 (index method)

	const blkSize = 8

	block, err := aes.NewCipher(kek)
	if err != nil {
		return nil, err
	}

	C := ciphertext
	n := (len(C) / blkSize) - 1

	// 1) Initialize variables.
	var bufA [blkSize]byte
	A := bufA[:]
	copy(A, C[:blkSize])

	R := make([][blkSize]byte, n)
	for i := range R {
		copy(R[i][:], C[(i+1)*8:])
	}

	// AES block
	var bufB [16]byte
	B := bufB[:]

	var bufT [blkSize]byte
	T := bufT[:]

	// 2) Compute intermediate values.
	for j := 5; j >= 0; j-- {
		for i := n; i >= 1; i-- {
			t := uint64((n * j) + i)
			binary.BigEndian.PutUint64(T, t)

			// B = AES-1(K, (A ^ t) | R[i])
			if err := util.Xor(B[:blkSize], A, T); err != nil {
				return nil, err
			}
			copy(B[blkSize:], R[i-1][:])
			block.Decrypt(B, B)

			// A = MSB(64, B)
			copy(A, B[:blkSize])

			// R[i] = LSB(64, B)
			copy(R[i-1][:], B[blkSize:])
		}
	}

	if subtle.ConstantTimeCompare(A, aesKeyWrapDefaultIV) != 1 {
		return nil, errors.New("integrity check failed - unexpected IV")
	}

	// 3) Output results.

	P := make([]byte, n*blkSize)
	for i := range R {
		copy(P[i*blkSize:], R[i][:])
	}

	return P, nil
}

type TestVector struct {
	Name       string
	Kek        []byte
	Plaintext  []byte
	Ciphertext []byte
}

// based on RFC3394
var TestVectors = []TestVector{
	{
		Name:       "4.1-128DataWith128KEK",
		Kek:        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		Plaintext:  []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		Ciphertext: []byte{0x1F, 0xA6, 0x8B, 0x0A, 0x81, 0x12, 0xB4, 0x47, 0xAE, 0xF3, 0x4B, 0xD8, 0xFB, 0x5A, 0x7B, 0x82, 0x9D, 0x3E, 0x86, 0x23, 0x71, 0xD2, 0xCF, 0xE5},
	},
	{
		Name:       "4.2-128DataWith192KEK",
		Kek:        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
		Plaintext:  []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		Ciphertext: []byte{0x96, 0x77, 0x8B, 0x25, 0xAE, 0x6C, 0xA4, 0x35, 0xF9, 0x2B, 0x5B, 0x97, 0xC0, 0x50, 0xAE, 0xD2, 0x46, 0x8A, 0xB8, 0xA1, 0x7A, 0xD8, 0x4E, 0x5D},
	},
	{
		Name:       "4.3-128DataWith256KEK",
		Kek:        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F},
		Plaintext:  []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
		Ciphertext: []byte{0x64, 0xE8, 0xC3, 0xF9, 0xCE, 0x0F, 0x5B, 0xA2, 0x63, 0xE9, 0x77, 0x79, 0x05, 0x81, 0x8A, 0x2A, 0x93, 0xC8, 0x19, 0x1E, 0x7D, 0x6E, 0x8A, 0xE7},
	},
	{
		Name:       "4.4-192DataWith192KEK",
		Kek:        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17},
		Plaintext:  []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
		Ciphertext: []byte{0x03, 0x1D, 0x33, 0x26, 0x4E, 0x15, 0xD3, 0x32, 0x68, 0xF2, 0x4E, 0xC2, 0x60, 0x74, 0x3E, 0xDC, 0xE1, 0xC6, 0xC7, 0xDD, 0xEE, 0x72, 0x5A, 0x93, 0x6B, 0xA8, 0x14, 0x91, 0x5C, 0x67, 0x62, 0xD2},
	},
	{
		Name:       "4.5-192DataWith256KEK",
		Kek:        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F},
		Plaintext:  []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
		Ciphertext: []byte{0xA8, 0xF9, 0xBC, 0x16, 0x12, 0xC6, 0x8B, 0x3F, 0xF6, 0xE6, 0xF4, 0xFB, 0xE3, 0x0E, 0x71, 0xE4, 0x76, 0x9C, 0x8B, 0x80, 0xA3, 0x2C, 0xB8, 0x95, 0x8C, 0xD5, 0xD1, 0x7D, 0x6B, 0x25, 0x4D, 0xA1},
	},
	{
		Name:       "4.6-256DataWith256KEK",
		Kek:        []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F},
		Plaintext:  []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		Ciphertext: []byte{0x28, 0xC9, 0xF4, 0x04, 0xC4, 0xB8, 0x10, 0xF4, 0xCB, 0xCC, 0xB3, 0x5C, 0xFB, 0x87, 0xF8, 0x26, 0x3F, 0x57, 0x86, 0xE2, 0xD8, 0x0E, 0xD3, 0x26, 0xCB, 0xC7, 0xF0, 0xE7, 0x1A, 0x99, 0xF4, 0x3B, 0xFB, 0x98, 0x8B, 0x9B, 0x7A, 0x02, 0xDD, 0x21},
	},
}
